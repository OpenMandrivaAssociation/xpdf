--- xpdf-3.02/goo/gmem.h.can2005	2007-02-27 23:05:51.000000000 +0100
+++ xpdf-3.02/goo/gmem.h	2007-03-10 15:44:52.000000000 +0100
@@ -36,13 +36,13 @@
  * Same as malloc, but prints error message and exits if malloc()
  * returns NULL.
  */
-extern void *gmalloc(int size) GMEM_EXCEP;
+extern void *gmalloc(size_t size) GMEM_EXCEP;
 
 /*
  * Same as realloc, but prints error message and exits if realloc()
  * returns NULL.  If <p> is NULL, calls malloc instead of realloc().
  */
-extern void *grealloc(void *p, int size) GMEM_EXCEP;
+extern void *grealloc(void *p, size_t size) GMEM_EXCEP;
 
 /*
  * These are similar to gmalloc and grealloc, but take an object count
--- xpdf-3.02/goo/gmem.cc.can2005	2007-02-27 23:05:51.000000000 +0100
+++ xpdf-3.02/goo/gmem.cc	2007-03-10 15:49:48.000000000 +0100
@@ -47,9 +47,9 @@
 
 #endif /* DEBUG_MEM */
 
-void *gmalloc(int size) GMEM_EXCEP {
+void *gmalloc(size_t size) GMEM_EXCEP {
 #ifdef DEBUG_MEM
-  int size1;
+  size_t size1;
   char *mem;
   GMemHdr *hdr;
   void *data;
@@ -106,11 +106,11 @@
 #endif
 }
 
-void *grealloc(void *p, int size) GMEM_EXCEP {
+void *grealloc(void *p, size_t size) GMEM_EXCEP {
 #ifdef DEBUG_MEM
   GMemHdr *hdr;
   void *q;
-  int oldSize;
+  size_t oldSize;
 
   if (size <= 0) {
     if (p) {
@@ -155,7 +155,7 @@
 }
 
 void *gmallocn(int nObjs, int objSize) GMEM_EXCEP {
-  int n;
+  size_t n;
 
   if (nObjs == 0) {
     return NULL;
@@ -195,7 +195,7 @@
 
 void gfree(void *p) {
 #ifdef DEBUG_MEM
-  int size;
+  size_t size;
   GMemHdr *hdr;
   unsigned long *trl, *clr;
 
--- xpdf-3.02/goo/gmempp.cc.can2005	2007-02-27 23:05:51.000000000 +0100
+++ xpdf-3.02/goo/gmempp.cc	2007-03-10 15:56:03.000000000 +0100
@@ -14,11 +14,11 @@
 #ifdef DEBUG_MEM
 
 void *operator new(size_t size) {
-  return gmalloc((int)size);
+  return gmalloc(size);
 }
 
 void *operator new[](size_t size) {
-  return gmalloc((int)size);
+  return gmalloc(size);
 }
 
 void operator delete(void *p) {
